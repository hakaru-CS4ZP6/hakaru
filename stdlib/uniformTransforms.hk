# Hakaru Standard Library
# author: Mahmoud Khattab

# Uniform distribution transformations

######################
# Uniform Transforms #
######################

# The documents on parametrization can be found at: http://www.math.wm.edu/~leemis/chart/UDR/UDR.html


# Pareto Distribution.
def pareto(lambda prob, kappa prob) measure(prob):
	X <~ uniform(0,1)
	return lambda / (real2prob(X) ** (1/kappa))

# Standard power distribution
def stdPower(beta prob) measure(prob):
	X <~ uniform(0,1)
	return real2prob(X) ** (1/beta)

# Gompertz distribution
def gompertz(delta prob, kappa prob) measure(prob):
	# TODO: Make sure kappa > 1
	X <~ uniform(0,1)
	return real2prob(log(real2prob(1-log(real2prob(X))*log(kappa)/delta))/log(kappa))

# Log-Logistic Distribution
def logLogistic(lambda prob, kappa prob) measure(prob):
	X <~ uniform(0,1)
	return real2prob((1-X)/X) ** (1/kappa) / lambda


#Logistic Distribution
def logistic(lambda prob, kappa prob) measure(real):
	X <~ logLogistic(lambda, kappa)
	return log(X)

# logistic exponential distribution
def logisticExponential(lambda prob, kappa prob) measure(prob):
	x <~ uniform(0,1)
	return real2prob( log( real2prob( 1 + ( real2prob(x/(1-x)) ** (1/kappa) ) ) ) / lambda )

#exponential power distribution
def exponentialPower(lambda prob, kappa prob) measure(prob):
	x <~ uniform(0,1)
	return real2prob((log(real2prob(1-log(real2prob(1-x))))) / lambda)**(1/kappa)

#benford Distribution
def benford() measure(prob):
	x <~ uniform(0,1)
	return 10**x

#generalized pareto Distribution
def generalizedPareto (delta prob,kappa real,gamma prob)measure(prob):
	x <~ lebesgue(0,∞)
	x = real2prob(x)
	pdf = (gamma + kappa / (x+delta)) * ((1 + x/delta) ** (- kappa)) * exp((- gamma) * x)
	weight(real2prob(pdf), return x)

#Power Distribution
def power(alpha prob, beta prob)measure(prob):
	x<~lebesgue(0,alpha)
	x = real2prob(x)
	pdf = (beta * x**(beta-1)) / alpha**beta
	weight(real2prob(pdf), return x)

#lomax Distribution
def lomax(lambda prob, kappa prob)measure(prob):
	x<~lebesgue(0,∞)
	x = real2prob(x)
	pdf = (lambda * kappa) / (1+lambda*x)**(kappa+1)
	weight(real2prob(pdf), return x)

#makeham Distribution
def makeham(delta prob, kappa prob, gamma prob)measure(prob):
	x<~lebesgue(0,∞)
	x = real2prob(x)
	pdf = (gamma+delta*kappa**x)*exp((-gamma)*x-delta*(kappa**x-1)/log(kappa))
	weight(real2prob(pdf), return x)

#minimax Distribution
def minimax(beta prob, gamma prob)measure(prob):
	x<~lebesgue(0,1)
	x = real2prob(x)
	pdf = beta*gamma*x**(beta-1)*real2prob(1-x**beta)**(gamma-1)
	weight(real2prob(pdf), return x)

